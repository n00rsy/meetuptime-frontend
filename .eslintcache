[{"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\reportWebVitals.js":"1","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\index.js":"2","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\CreateForm.js":"3","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\calendar.js":"4","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\week.js":"5","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createForm.js":"6","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createPage.js":"7","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\viewPage.js":"8","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signinForm.js":"9","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\available.js":"10","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\table.js":"11","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\utils.js":"12","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\timeTable.js":"13","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signoutForm.js":"14","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\navbar.js":"15","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\footer.js":"16","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\groupAvailable.js":"17","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\legend.js":"18","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\background.js":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":1685,"mtime":1608243083732,"results":"22","hashOfConfig":"21"},{"size":5617,"mtime":1606456407006,"results":"23","hashOfConfig":"21"},{"size":797,"mtime":1607664988595,"results":"24","hashOfConfig":"21"},{"size":2428,"mtime":1608255957915,"results":"25","hashOfConfig":"21"},{"size":11910,"mtime":1608321380514,"results":"26","hashOfConfig":"21"},{"size":877,"mtime":1608235425120,"results":"27","hashOfConfig":"21"},{"size":6502,"mtime":1608242914383,"results":"28","hashOfConfig":"21"},{"size":3689,"mtime":1608254457423,"results":"29","hashOfConfig":"21"},{"size":5207,"mtime":1608254542110,"results":"30","hashOfConfig":"21"},{"size":10079,"mtime":1608154310217,"results":"31","hashOfConfig":"21"},{"size":2572,"mtime":1608153333259,"results":"32","hashOfConfig":"21"},{"size":1895,"mtime":1608154460201,"results":"33","hashOfConfig":"21"},{"size":1800,"mtime":1608254567223,"results":"34","hashOfConfig":"21"},{"size":659,"mtime":1608243068445,"results":"35","hashOfConfig":"21"},{"size":585,"mtime":1608156572777,"results":"36","hashOfConfig":"21"},{"size":2027,"mtime":1608154192102,"results":"37","hashOfConfig":"21"},{"size":493,"mtime":1607995996163,"results":"38","hashOfConfig":"21"},{"size":1684,"mtime":1608318224308,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17p8c2d",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\reportWebVitals.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\index.js",[],["82","83"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\CreateForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\calendar.js",[],["84","85"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\week.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createForm.js",["86","87","88"],"import React, { useState, useEffect } from \"react\"\r\nimport { useForm } from 'react-hook-form'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Moment from 'moment-timezone'\r\nimport { Form, Row, Col } from 'react-bootstrap'\r\n\r\nimport Calendar from './calendar'\r\nimport Week from './week'\r\nimport CONFIG from '../config.json'\r\n\r\nlet timezones = Moment.tz.names()\r\n\r\nexport default function CreateForm() {\r\n\r\n    const [showCal, setShowCal] = useState(true)\r\n    const [selectedDates, setselectedDates] = useState([])\r\n    const [selectedDays, setSelectedDays] = useState([])\r\n    const [daySelectionError, setDaySelectionError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const { register, errors, handleSubmit } = useForm({\r\n        defaultValues: {\r\n            timezone: Moment.tz.guess(),\r\n            startTime: \"9\",\r\n            endTime: \"17\",\r\n            surveyUsing: \"Dates\"\r\n        }\r\n    })\r\n\r\n    let history = useHistory()\r\n\r\n    function processDates(dates, starttime, timezone) {\r\n        let processedDates = []\r\n        dates.forEach(date => {\r\n            let utcDate = Moment(date).tz(timezone)\r\n            utcDate.set({ hour: starttime })\r\n            processedDates.push(utcDate.toISOString())\r\n        })\r\n        return processedDates\r\n    }\r\n\r\n    const onSubmit = function (data) {\r\n        data.startTime = parseInt(data.startTime)\r\n        data.endTime = parseInt(data.endTime)\r\n        console.log(\"received data: \", data)\r\n        let validDaysSelection = validateDaySelections(data.surveyUsing)\r\n        if (data.surveyUsing === \"Dates\" && validDaysSelection) {\r\n            data.dates = processDates(selectedDates, data.startTime, data.timezone)\r\n            data.days = []\r\n            sendMeeting(data)\r\n        }\r\n        else if (data.surveyUsing === \"Days\" && validDaysSelection) {\r\n            data.days = selectedDays\r\n            data.dates = []\r\n            sendMeeting(data)\r\n        }\r\n    }\r\n\r\n    const onChange = function (data) {\r\n        if (data.target.value === \"Dates\") {\r\n            setShowCal(true)\r\n        }\r\n        else {\r\n            setShowCal(false)\r\n        }\r\n    }\r\n    function sendMeeting(meeting) {\r\n        console.log(\"sending post request with: \", meeting)\r\n        setLoading(true)\r\n        fetch(CONFIG.backendApi + '/api/meetings', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(meeting)\r\n        })\r\n            .then(res => {\r\n                console.log(\"raw server response:\", res)\r\n                setLoading(false)\r\n                return res.json()\r\n            })\r\n            .catch(() => {\r\n                setLoading(false)\r\n                setDaySelectionError(\"Unable to create event :( Please try again later.\")\r\n            })\r\n            .then(data => {\r\n                console.log(data);\r\n                setLoading(false)\r\n                if (data && data.code) history.push(\"/\" + data.code)\r\n                else setDaySelectionError(\"Unable to create event :( Please try again later.\")\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (daySelectionError) setDaySelectionError(null)\r\n    }, [selectedDates, selectedDays, showCal])\r\n\r\n    function TimeSelector() {\r\n        if (showCal) return <Calendar selectedDates={selectedDates} setselectedDates={setselectedDates} />\r\n        return <Week selectedDays={selectedDays} setSelectedDays={setSelectedDays} />\r\n    }\r\n\r\n    const validateTimeSelections = () => {\r\n        let startTime = parseInt(document.getElementsByName(\"startTime\")[0].value)\r\n        let endTime = parseInt(document.getElementsByName(\"endTime\")[0].value)\r\n        return endTime > startTime\r\n    }\r\n\r\n    const validateDaySelections = (surveyUsing) => {\r\n        if (surveyUsing === \"Dates\") {\r\n            if (selectedDates.length === 0) {\r\n                setDaySelectionError(\"Please select at least one date.\")\r\n                return false\r\n            }\r\n            else if (selectedDates.length > 7) {\r\n                setDaySelectionError(\"You may only selct up to 7 dates.\")\r\n                return false\r\n            }\r\n            else {\r\n                return true\r\n            }\r\n        }\r\n        else {\r\n            if (selectedDays.length === 0) {\r\n                setDaySelectionError(\"Please select at least one day.\")\r\n                return false\r\n            }\r\n            else {\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    //console.log(errors)\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"create-form\" autoComplete=\"off\">\r\n\r\n            <div className=\"text-input-container\">\r\n                <input type=\"text\" placeholder=\"Event Name\" name=\"name\" className=\"event-name-input\" ref={register({\r\n                    required: {\r\n                        value: true,\r\n                        message: \"You must enter an event name\"\r\n                    }, minLength: {\r\n                        value: 1,\r\n                        message: \"Event name must be between 1-100 characters long\"\r\n                    }, maxLength: {\r\n                        value: 100,\r\n                        message: \"Event name must be between 1-100 characters long\"\r\n                    }\r\n                })} />\r\n                <div className=\"error\">{(errors.name && errors.name.message) ? errors.name.message : \"\"}</div>\r\n\r\n                <input type=\"text\" placeholder=\"Description (optional)\" name=\"description\" className=\"event-description-input\" ref={register({\r\n                    maxLength: {\r\n                        value: 200,\r\n                        message: \"Event description must be less than 200 characters long\"\r\n                    }\r\n                })} />\r\n\r\n                <div className=\"error\">{(errors.description && errors.description.message) ? errors.description.message : \"\"}</div>\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"day-selector-container\">\r\n                    <div onChange={onChange}>\r\n                        <span style={{ marginRight: \"1rem\" }}>Survey Using:</span> <input id=\"dates\" name=\"surveyUsing\" type=\"radio\" value=\"Dates\" style={{ marginLeft: \"1rem\" }} ref={register({ required: true })} />\r\n                        <label for=\"dates\" style={{ marginRight: \"1rem\" }}>Dates</label>\r\n                        <input id=\"days\" name=\"surveyUsing\" type=\"radio\" value=\"Days\" ref={register({ required: true })} />\r\n                        <label for=\"days\">Days</label>\r\n                        <div style={{ paddingTop: \"1rem\", borderBottom: \"1px solid white\", width: \"70%\", margin: \"auto\" }}></div>\r\n                    </div>\r\n\r\n                    <TimeSelector />\r\n                    <div className=\"error\" style={{ textAlign: \"center\" }}>{(daySelectionError) ? daySelectionError : \"\"}</div>\r\n                    <div className=\"color-block\"></div>\r\n                </div>\r\n            </div>\r\n            {showCal &&\r\n                <div className=\"time-container\">\r\n                    In <Form.Control as=\"select\" name=\"timezone\" className=\"select\" style={{ maxWidth: \"20rem\", marginBottom: \"1rem\" }} ref={register({ required: true })}>\r\n                        {timezones.map(tz => <option >{tz}</option>)}\r\n                    </Form.Control>\r\n                </div>}\r\n\r\n            <div className=\"time-container\">\r\n                <span className=\"time-select-container\">\r\n                    <span style = {{whiteSpace:\"nowrap\"}}>From <Form.Control className=\"select\" as=\"select\" name=\"startTime\" style={{ maxWidth: \"7rem\", marginRight: \"1rem\", display: \"inline\", marginTop: \"0.5rem\" }} ref={register({\r\n                        required: true,\r\n                        validate: validateTimeSelections,\r\n                    })}>\r\n                        <option value=\"0\">midnight</option>\r\n                        <option value=\"1\"> 1 am</option>\r\n                        <option value=\"2\"> 2 am</option>\r\n                        <option value=\"3\"> 3 am</option>\r\n                        <option value=\"4\"> 4 am</option>\r\n                        <option value=\"5\"> 5 am</option>\r\n                        <option value=\"6\"> 6 am</option>\r\n                        <option value=\"7\"> 7 am</option>\r\n                        <option value=\"8\"> 8 am</option>\r\n                        <option value=\"9\"> 9 am</option>\r\n                        <option value=\"10\"> 10 am</option>\r\n                        <option value=\"11\"> 11 am</option>\r\n                        <option value=\"12\"> noon</option>\r\n                        <option value=\"13\"> 1 pm</option>\r\n                        <option value=\"14\"> 2 pm</option>\r\n                        <option value=\"15\"> 3 pm</option>\r\n                        <option value=\"16\"> 4 pm</option>\r\n                        <option value=\"17\"> 5 pm</option>\r\n                        <option value=\"18\"> 6 pm</option>\r\n                        <option value=\"19\"> 7 pm</option>\r\n                        <option value=\"20\"> 8 pm</option>\r\n                        <option value=\"21\"> 9 pm</option>\r\n                        <option value=\"22\"> 10 pm</option>\r\n                        <option value=\"23\"> 11 pm</option>\r\n                        <option value=\"0\"> midnight</option>\r\n                    </Form.Control>\r\n                    </span>\r\n                </span>\r\n\r\n                <span className=\"time-select-container\">\r\n                    <span style = {{whiteSpace:\"nowrap\"}}>To <Form.Control as=\"select\" id=\"endTime\" name=\"endTime\" className=\"select\" style={{ maxWidth: \"7rem\", display: \"inline\",  marginTop: \"0.5rem\" }} ref={register({\r\n                        required: true,\r\n                        validate: validateTimeSelections,\r\n                    })}>\r\n\r\n                        <option value=\"0\">midnight</option>\r\n                        <option value=\"1\"> 1 am</option>\r\n                        <option value=\"2\"> 2 am</option>\r\n                        <option value=\"3\"> 3 am</option>\r\n                        <option value=\"4\"> 4 am</option>\r\n                        <option value=\"5\"> 5 am</option>\r\n                        <option value=\"6\"> 6 am</option>\r\n                        <option value=\"7\"> 7 am</option>\r\n                        <option value=\"8\"> 8 am</option>\r\n                        <option value=\"9\"> 9 am</option>\r\n                        <option value=\"10\"> 10 am</option>\r\n                        <option value=\"11\"> 11 am</option>\r\n                        <option value=\"12\"> noon</option>\r\n                        <option value=\"13\"> 1 pm</option>\r\n                        <option value=\"14\"> 2 pm</option>\r\n                        <option value=\"15\"> 3 pm</option>\r\n                        <option value=\"16\"> 4 pm</option>\r\n                        <option value=\"17\"> 5 pm</option>\r\n                        <option value=\"18\"> 6 pm</option>\r\n                        <option value=\"19\"> 7 pm</option>\r\n                        <option value=\"20\"> 8 pm</option>\r\n                        <option value=\"21\"> 9 pm</option>\r\n                        <option value=\"22\"> 10 pm</option>\r\n                        <option value=\"23\"> 11 pm</option>\r\n                        <option value=\"0\"> midnight</option>\r\n                    </Form.Control>\r\n                    </span>\r\n                </span>\r\n                <div className=\"error\">{\r\n                    ((errors.endTime && errors.endTime.type === \"validate\") ||\r\n                        (errors.startTime && errors.startTime.type === \"validate\")) ?\r\n                        \"Start time must be before end time!\" : \"\"}</div>\r\n\r\n            </div>\r\n            <input className=\"button-important\" type=\"submit\" value={loading ? \"CREATING EVENT!!!\" : \"Create Event\"} />\r\n        </form>\r\n    );\r\n}\r\n\r\n","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createPage.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\viewPage.js",["89","90","91","92"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signinForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\available.js",["93"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\table.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\utils.js",["94","95","96","97"],"export const convert1dTo2dArray = (input, numRows, numCols) => {\r\n    let output = []\r\n    for (let row = 0; row < numRows; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < numCols; col++) {\r\n            currRow.push(input[getIndexFromCoords(row, col, numCols)])\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const subtract2dArrays = (a, b) => {\r\n    for (let row = 0; row < a.length; row++) {\r\n        for (let col = 0; col < a[0].length; col++) {\r\n            a[row][col] -= b[row][col] === true ? 1 : 0\r\n        }\r\n    }\r\n    return a\r\n}\r\n\r\nexport const add2dArrays = (a, b) => {\r\n    //console.log(\"addition input:\", a, b)\r\n    for (let row = 0; row < a.length; row++) {\r\n        for (let col = 0; col < a[0].length; col++) {\r\n            a[row][col] += b[row][col]\r\n        }\r\n    }\r\n    //console.log(\"addition output: \", a)\r\n    return a\r\n}\r\n\r\nexport const getIndexFromCoords = (row, col, numCols) => {\r\n    return (row * numCols) + col\r\n}\r\n\r\nexport const convert2dTo1dArray = (matrix) => {\r\n    let output = []\r\n    matrix.forEach(row => {\r\n        row.forEach(cell => {\r\n            output.push(cell)\r\n        })\r\n    })\r\n    //console.log(\"1d array:\", output)\r\n    return output\r\n}\r\n\r\nexport const initialize2dIntArray = (numRows, numCols) => {\r\n    let output = []\r\n    for (let row = 0; row < numRows; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < numCols; col++) {\r\n            currRow.push(0)\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const map2dArray= (matrix, num) => {\r\n    console.log(\"mapping matrix to this many respondents: \", num)\r\n    let output = []\r\n    for (let row = 0; row < matrix.length; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < matrix[0].length; col++) {\r\n            if(num === 0 || matrix[row][col] === 0) currRow.push(\"#ffffff\")\r\n            else if(num === 1) {\r\n                currRow.push(\"#3a506b\")\r\n            }\r\n            else currRow.push(lerpColor(0xb5d1f5, 0x3A506B , (matrix[row][col]-1)/(num-1)))\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const lerpColor = function(a, b, amount) {\r\n    const ar = a >> 16,\r\n          ag = a >> 8 & 0xff,\r\n          ab = a & 0xff,\r\n\r\n          br = b >> 16,\r\n          bg = b >> 8 & 0xff,\r\n          bb = b & 0xff,\r\n\r\n          rr = ar + amount * (br - ar),\r\n          rg = ag + amount * (bg - ag),\r\n          rb = ab + amount * (bb - ab);\r\n\r\n    return '#' + ((rr << 16) + (rg << 8) + (rb | 0)).toString(16);\r\n}","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\timeTable.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signoutForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\navbar.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\footer.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\groupAvailable.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\legend.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\background.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"98","replacedBy":"102"},{"ruleId":"100","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":5,"column":16,"nodeType":"106","messageId":"107","endLine":5,"endColumn":19},{"ruleId":"104","severity":1,"message":"108","line":5,"column":21,"nodeType":"106","messageId":"107","endLine":5,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":97,"column":8,"nodeType":"111","endLine":97,"endColumn":46,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"113","line":4,"column":10,"nodeType":"106","messageId":"107","endLine":4,"endColumn":18},{"ruleId":"104","severity":1,"message":"114","line":23,"column":11,"nodeType":"106","messageId":"107","endLine":23,"endColumn":18},{"ruleId":"109","severity":1,"message":"115","line":97,"column":35,"nodeType":"111","endLine":97,"endColumn":37,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":115,"column":21,"nodeType":"119","endLine":115,"endColumn":40},{"ruleId":"117","severity":1,"message":"118","line":83,"column":62,"nodeType":"119","endLine":83,"endColumn":141},{"ruleId":"120","severity":1,"message":"121","line":79,"column":18,"nodeType":"122","messageId":"123","endLine":79,"endColumn":20},{"ruleId":"120","severity":1,"message":"121","line":79,"column":23,"nodeType":"122","messageId":"123","endLine":79,"endColumn":24},{"ruleId":"120","severity":1,"message":"121","line":83,"column":18,"nodeType":"122","messageId":"123","endLine":83,"endColumn":20},{"ruleId":"120","severity":1,"message":"121","line":83,"column":23,"nodeType":"122","messageId":"123","endLine":83,"endColumn":24},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],["124"],["125"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'daySelectionError'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'isMobile' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlePath'. Either include it or remove the dependency array.",["127"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-mixed-operators","Unexpected mix of '>>' and '&'.","BinaryExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [daySelectionError, selectedDates, selectedDays, showCal]",{"range":"132","text":"133"},"Update the dependencies array to be: [handlePath]",{"range":"134","text":"135"},[3244,3282],"[daySelectionError, selectedDates, selectedDays, showCal]",[3908,3910],"[handlePath]"]