[{"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\reportWebVitals.js":"1","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\index.js":"2","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\CreateForm.js":"3","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\calendar.js":"4","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\week.js":"5","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createForm.js":"6","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createPage.js":"7","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\viewPage.js":"8","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signinForm.js":"9","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\available.js":"10","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\table.js":"11","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\utils.js":"12","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\timeTable.js":"13","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signoutForm.js":"14","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\navbar.js":"15","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\footer.js":"16","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\groupAvailable.js":"17","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\legend.js":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"20"},{"size":1540,"mtime":1607813025113,"results":"21","hashOfConfig":"20"},{"size":5617,"mtime":1606456407006,"results":"22","hashOfConfig":"20"},{"size":797,"mtime":1607664988595,"results":"23","hashOfConfig":"20"},{"size":2403,"mtime":1607797634450,"results":"24","hashOfConfig":"20"},{"size":11077,"mtime":1607989443872,"results":"25","hashOfConfig":"20"},{"size":1154,"mtime":1607823385166,"results":"26","hashOfConfig":"20"},{"size":4974,"mtime":1607992219540,"results":"27","hashOfConfig":"20"},{"size":3631,"mtime":1607887230705,"results":"28","hashOfConfig":"20"},{"size":5008,"mtime":1607998353166,"results":"29","hashOfConfig":"20"},{"size":9951,"mtime":1607996736286,"results":"30","hashOfConfig":"20"},{"size":2572,"mtime":1607888722559,"results":"31","hashOfConfig":"20"},{"size":1858,"mtime":1607997423757,"results":"32","hashOfConfig":"20"},{"size":1744,"mtime":1607992430486,"results":"33","hashOfConfig":"20"},{"size":632,"mtime":1607643343797,"results":"34","hashOfConfig":"20"},{"size":570,"mtime":1607889694713,"results":"35","hashOfConfig":"20"},{"size":1997,"mtime":1607997226997,"results":"36","hashOfConfig":"20"},{"size":493,"mtime":1607995996163,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17p8c2d",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\reportWebVitals.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\index.js",["83"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nimport CreatePage from './createPage/createPage'\nimport ViewPage from './viewPage/viewPage'\nimport NavigationBar from './shared/navbar'\nimport Footer from './shared/footer'\n\n/*\n<h1>React Router Example</h1>\n    <ul role=\"nav\">\n    <li><Link to=\"/\">Home</Link></li>\n      <li><Link to=\"/about\">About</Link></li>\n      <li><Link to=\"/howto\">How To</Link></li>\n      <li><Link to=\"/faq\">FAQ</Link></li>\n    </ul>\n*/\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <Router>\n      <NavigationBar />\n      <div className=\"app-wrapper\">\n        <Switch>\n          <Route exact path=\"/\">\n            <CreatePage />\n          </Route>\n          <Route path=\"/about\">\n            <p>ABOUT PAGE</p>\n          </Route>\n          <Route path=\"/howto\">\n            <p>HOW TO</p>\n          </Route>\n          <Route path=\"/faq\">\n            <p>FAQ</p>\n          </Route>\n          <Route>\n            <ViewPage />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["84","85"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\CreateForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\calendar.js",[],["86","87"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\week.js",["88"],"import React, { useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nexport default function Week({ selectedDays, setSelectedDays }) {\r\n  const { register, errors } = useForm({\r\n    reValidateMode: 'onChange'\r\n  });\r\n\r\n  function onChange(data) {\r\n    let newSelectedDays = [...selectedDays]\r\n    if (!data.target.checked) {\r\n      const selectedIndex = newSelectedDays.findIndex(selectedDay =>\r\n        selectedDay === data.target.name\r\n      );\r\n      newSelectedDays.splice(selectedIndex, 1);\r\n    }\r\n    else {\r\n      newSelectedDays.push(data.target.name);\r\n    }\r\n    setSelectedDays(newSelectedDays)\r\n  }\r\n\r\n  useEffect(() => {\r\n    selectedDays.forEach(selectedDay => {\r\n      document.getElementsByName(selectedDay)[0].checked = true\r\n    })\r\n  });\r\n\r\n  return (\r\n    <div className = \"days-wrapper\" onChange={onChange}>\r\n      <div className=\"day-container\">\r\n        <label className=\"day-label\" for=\"sun\">Sun</label>\r\n        <input id=\"sun\" className=\"day\" type=\"checkbox\" placeholder=\"Sunday\" name=\"0\" ref={register} />\r\n      </div>\r\n      <div className=\"day-container\">\r\n        <label className=\"day-label\" for=\"mon\">Mon</label>\r\n        <input id=\"mon\" className=\"day\" type=\"checkbox\" placeholder=\"Monday\" name=\"1\" ref={register} />\r\n      </div>\r\n      <div className=\"day-container\">\r\n        <label className=\"day-label\" for=\"tue\">Tue</label>\r\n        <input id=\"tue\" className=\"day\" type=\"checkbox\" placeholder=\"Tuesday\" name=\"2\" ref={register} />\r\n      </div>\r\n      <div className=\"day-container\">\r\n        <label className=\"day-label\" for=\"wed\">Wed</label>\r\n        <input id=\"wed\" className=\"day\" type=\"checkbox\" placeholder=\"Wednesday\" name=\"3\" ref={register} />\r\n      </div>\r\n      <div className=\"day-container\">\r\n        <label className=\"day-label\" for=\"thu\">Thu</label>\r\n        <input id=\"thu\" className=\"day\" type=\"checkbox\" placeholder=\"Thursday\" name=\"4\" ref={register} />\r\n      </div>\r\n      <div className=\"day-container\">\r\n        <label className=\"day-label\" for=\"fri\">Fri</label>\r\n        <input id=\"fri\" className=\"day\" type=\"checkbox\" placeholder=\"Friday\" name=\"5\" ref={register} />\r\n      </div>\r\n      <div className=\"day-container\">\r\n        <label className=\"day-label\" for=\"sat\">Sat</label>\r\n        <input id=\"sat\" className=\"day\" type=\"checkbox\" placeholder=\"Saturday\" name=\"6\" ref={register} />\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createForm.js",["89"],"import React, { useState, useEffect } from \"react\"\r\nimport { useForm } from 'react-hook-form'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Moment from 'moment-timezone'\r\n\r\nimport { Form } from 'react-bootstrap'\r\n\r\nimport Calendar from './calendar'\r\nimport Week from './week'\r\n\r\nlet timezones = Moment.tz.names()\r\n\r\nexport default function CreateForm() {\r\n\r\n    const [showCal, setShowCal] = useState(true)\r\n    const [selectedDates, setselectedDates] = useState([])\r\n    const [selectedDays, setSelectedDays] = useState([])\r\n    const [daySelectionError, setDaySelectionError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const { register, errors, handleSubmit } = useForm({\r\n        defaultValues: {\r\n            timezone: Moment.tz.guess(),\r\n            startTime: \"9\",\r\n            endTime: \"17\",\r\n            surveyUsing: \"Dates\"\r\n        }\r\n    })\r\n\r\n    let history = useHistory()\r\n\r\n    function processDates(dates, starttime, timezone) {\r\n        let processedDates = []\r\n        dates.forEach(date => {\r\n            let utcDate = Moment(date).tz(timezone)\r\n            utcDate.set({ hour: starttime })\r\n            processedDates.push(utcDate.toISOString())\r\n        })\r\n        return processedDates\r\n    }\r\n\r\n    const onSubmit = function (data) {\r\n        data.startTime = parseInt(data.startTime)\r\n        data.endTime = parseInt(data.endTime)\r\n        console.log(\"received data: \", data)\r\n        let validDaysSelection = validateDaySelections(data.surveyUsing)\r\n        if (data.surveyUsing === \"Dates\" && validDaysSelection) {\r\n            data.dates = processDates(selectedDates, data.startTime, data.timezone)\r\n            data.days = []\r\n            sendMeeting(data)\r\n        }\r\n        else if (data.surveyUsing === \"Days\" && validDaysSelection) {\r\n            data.days = selectedDays\r\n            data.dates = []\r\n            sendMeeting(data)\r\n        }\r\n    }\r\n\r\n    const onChange = function (data) {\r\n        if (data.target.value === \"Dates\") {\r\n            setShowCal(true)\r\n        }\r\n        else {\r\n            setShowCal(false)\r\n        }\r\n    }\r\n\r\n    function sendMeeting(meeting) {\r\n        console.log(\"sending post request with: \", meeting)\r\n        setLoading(true)\r\n        fetch('/api/meetings', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(meeting)\r\n        })\r\n            .then(res => {\r\n                setLoading(false)\r\n                return res.json()\r\n            })\r\n            .catch(() => {\r\n                setDaySelectionError(\"Unable to create event :( Please try again later.\")\r\n            })\r\n            .then(data => {\r\n                console.log(data);\r\n\r\n                if (data && data.code) history.push(\"/\" + data.code)\r\n                else setDaySelectionError(\"Unable to create event :( Please try again later.\")\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (daySelectionError) setDaySelectionError(null)\r\n    }, [selectedDates, selectedDays, showCal])\r\n\r\n    function TimeSelector() {\r\n        if (showCal) return <Calendar selectedDates={selectedDates} setselectedDates={setselectedDates} />\r\n        return <Week selectedDays={selectedDays} setSelectedDays={setSelectedDays} />\r\n    }\r\n\r\n    const validateTimeSelections = () => {\r\n        let startTime = parseInt(document.getElementsByName(\"startTime\")[0].value)\r\n        let endTime = parseInt(document.getElementsByName(\"endTime\")[0].value)\r\n        return endTime > startTime\r\n    }\r\n\r\n    const validateDaySelections = (surveyUsing) => {\r\n        if (surveyUsing === \"Dates\") {\r\n            if (selectedDates.length === 0) {\r\n                setDaySelectionError(\"Please select at least one date.\")\r\n                return false\r\n            }\r\n            else if (selectedDates.length > 7) {\r\n                setDaySelectionError(\"You may only selct up to 7 dates.\")\r\n                return false\r\n            }\r\n            else {\r\n                return true\r\n            }\r\n        }\r\n        else {\r\n            if (selectedDays.length === 0) {\r\n                setDaySelectionError(\"Please select at least one day.\")\r\n                return false\r\n            }\r\n            else {\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    //console.log(errors)\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"create-form\" autoComplete=\"off\">\r\n\r\n            <div className=\"text-input-container\">\r\n                <input type=\"text\" placeholder=\"Event Name\" name=\"name\" className=\"event-name-input\" ref={register({\r\n                    required: {\r\n                        value: true,\r\n                        message: \"You must enter an event name\"\r\n                    }, minLength: {\r\n                        value: 1,\r\n                        message: \"Event name must be between 1-100 characters long\"\r\n                    }, maxLength: {\r\n                        value: 100,\r\n                        message: \"Event name must be between 1-100 characters long\"\r\n                    }\r\n                })} />\r\n                <div className=\"error\">{(errors.name && errors.name.message) ? errors.name.message : \"\"}</div>\r\n\r\n                <input type=\"text\" placeholder=\"Description (optional)\" name=\"description\" className=\"event-description-input\" ref={register({\r\n                    maxLength: {\r\n                        value: 200,\r\n                        message: \"Event description must be less than 200 characters long\"\r\n                    }\r\n                })} />\r\n\r\n                <div className=\"error\">{(errors.description && errors.description.message) ? errors.description.message : \"\"}</div>\r\n            </div>\r\n            <div style = {{display: \"flex\", justifyContent: \"center\"}}>\r\n                <div className=\"day-selector-container\">\r\n                    <div onChange={onChange}>\r\n                        <span style={{ marginRight: \"1rem\" }}>Survey Using:</span> <input id=\"dates\" name=\"surveyUsing\" type=\"radio\" value=\"Dates\" style={{ marginLeft: \"1rem\" }} ref={register({ required: true })} />\r\n                        <label for=\"dates\" style={{ marginRight: \"1rem\" }}>Dates</label>\r\n                        <input id=\"days\" name=\"surveyUsing\" type=\"radio\" value=\"Days\" ref={register({ required: true })} />\r\n                        <label for=\"days\">Days</label>\r\n                        <div style = {{paddingTop: \"1rem\", borderBottom: \"1px solid white\", width: \"70%\", margin: \"auto\"}}></div>\r\n                    </div>\r\n\r\n                    <TimeSelector />\r\n                    <div className=\"error\" style={{ textAlign: \"center\" }}>{(daySelectionError) ? daySelectionError : \"\"}</div>\r\n                    <div className=\"color-block\"></div>\r\n                </div>\r\n            </div>\r\n            {showCal &&\r\n                <div className=\"time-container\">\r\n                    In <Form.Control as=\"select\" name=\"timezone\" className=\"select\" style={{ maxWidth: \"20rem\", marginBottom: \"1rem\" }} ref={register({ required: true })}>\r\n                        {timezones.map(tz => <option >{tz}</option>)}\r\n                    </Form.Control>\r\n                </div>}\r\n\r\n            <div className=\"time-container\">\r\n                From <Form.Control className=\"select\" as=\"select\" name=\"startTime\" style={{ maxWidth: \"8rem\", marginRight: \"1rem\" }} ref={register({\r\n                required: true,\r\n                validate: validateTimeSelections,\r\n            })}>\r\n                    <option value=\"0\">midnight</option>\r\n                    <option value=\"1\"> 1 am</option>\r\n                    <option value=\"2\"> 2 am</option>\r\n                    <option value=\"3\"> 3 am</option>\r\n                    <option value=\"4\"> 4 am</option>\r\n                    <option value=\"5\"> 5 am</option>\r\n                    <option value=\"6\"> 6 am</option>\r\n                    <option value=\"7\"> 7 am</option>\r\n                    <option value=\"8\"> 8 am</option>\r\n                    <option value=\"9\"> 9 am</option>\r\n                    <option value=\"10\"> 10 am</option>\r\n                    <option value=\"11\"> 11 am</option>\r\n                    <option value=\"12\"> noon</option>\r\n                    <option value=\"13\"> 1 pm</option>\r\n                    <option value=\"14\"> 2 pm</option>\r\n                    <option value=\"15\"> 3 pm</option>\r\n                    <option value=\"16\"> 4 pm</option>\r\n                    <option value=\"17\"> 5 pm</option>\r\n                    <option value=\"18\"> 6 pm</option>\r\n                    <option value=\"19\"> 7 pm</option>\r\n                    <option value=\"20\"> 8 pm</option>\r\n                    <option value=\"21\"> 9 pm</option>\r\n                    <option value=\"22\"> 10 pm</option>\r\n                    <option value=\"23\"> 11 pm</option>\r\n                    <option value=\"0\"> midnight</option>\r\n                </Form.Control>\r\n\r\n                To <Form.Control as=\"select\" name=\"endTime\" className=\"select\" style={{ maxWidth: \"8rem\" }} ref={register({\r\n                    required: true,\r\n                    validate: validateTimeSelections,\r\n                })}>\r\n\r\n                    <option value=\"0\">midnight</option>\r\n                    <option value=\"1\"> 1 am</option>\r\n                    <option value=\"2\"> 2 am</option>\r\n                    <option value=\"3\"> 3 am</option>\r\n                    <option value=\"4\"> 4 am</option>\r\n                    <option value=\"5\"> 5 am</option>\r\n                    <option value=\"6\"> 6 am</option>\r\n                    <option value=\"7\"> 7 am</option>\r\n                    <option value=\"8\"> 8 am</option>\r\n                    <option value=\"9\"> 9 am</option>\r\n                    <option value=\"10\"> 10 am</option>\r\n                    <option value=\"11\"> 11 am</option>\r\n                    <option value=\"12\"> noon</option>\r\n                    <option value=\"13\"> 1 pm</option>\r\n                    <option value=\"14\"> 2 pm</option>\r\n                    <option value=\"15\"> 3 pm</option>\r\n                    <option value=\"16\"> 4 pm</option>\r\n                    <option value=\"17\"> 5 pm</option>\r\n                    <option value=\"18\"> 6 pm</option>\r\n                    <option value=\"19\"> 7 pm</option>\r\n                    <option value=\"20\"> 8 pm</option>\r\n                    <option value=\"21\"> 9 pm</option>\r\n                    <option value=\"22\"> 10 pm</option>\r\n                    <option value=\"23\"> 11 pm</option>\r\n                    <option value=\"0\"> midnight</option>\r\n                </Form.Control>\r\n\r\n                <div className=\"error\">{\r\n                    ((errors.endTime && errors.endTime.type === \"validate\") ||\r\n                        (errors.startTime && errors.startTime.type === \"validate\")) ?\r\n                        \"Start time must be before end time!\" : \"\"}</div>\r\n\r\n            </div>\r\n            <input className=\"button-important\" type=\"submit\" value={loading ? \"CREATING EVENT!!!\" : \"Create Event\"} />\r\n        </form>\r\n    );\r\n}\r\n\r\n","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createPage.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\viewPage.js",["90","91","92"],"import React, { useState, useEffect } from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport { Form, FormControl } from 'react-bootstrap'\r\n\r\nimport SigninForm from './signinForm'\r\nimport SignoutForm from './signoutForm'\r\nimport AvailabilityTable from './available'\r\nimport { convert1dTo2dArray, initialize2dIntArray, add2dArrays, map2dArray } from './utils'\r\nimport Moment from 'moment-timezone'\r\n\r\nexport default function ViewPage() {\r\n\r\n    const [meetingData, setMeetingData] = useState(null)\r\n    const [userData, setUserData] = useState(null)\r\n    const [timezone, _setTimezone] = useState(Moment.tz.guess())\r\n    const [fetchErr, setFetchErr] = useState(false)\r\n\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n\r\n    function handlePath() {\r\n        console.log(\"handling path!!!\")\r\n        let path = location.pathname\r\n        if (path.length === 9) {\r\n            getMeeting(path)\r\n        }\r\n        else {\r\n            console.log(\"invalid path\")\r\n            setFetchErr(true)\r\n        }\r\n    }\r\n\r\n    function getMeeting(path) {\r\n        fetch('/api/meetings' + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(res => {\r\n                console.log('raw server response: ', res)\r\n                return res.status === 404 ? null : res.json()\r\n            })\r\n            .then(data => {\r\n                if (data == null) {\r\n                    setFetchErr(true)\r\n                }\r\n                else {\r\n                    if (data.days.length === 0) data.days = [...data.dates]\r\n\r\n                    //let availableCount = initialize2dIntArray(data.numTimeslots, data.numDays)\r\n                    data.availableCount = initialize2dIntArray(data.numTimeslots, data.numDays)\r\n                    data.numRespondents = data.people.length\r\n                    data.people.forEach(person => {\r\n                        person.available = convert1dTo2dArray(person.available, data.numTimeslots, data.numDays)\r\n                        data.availableCount = add2dArrays(data.availableCount, person.available)\r\n                        //console.log(\"converted available array: \" + person.name, person.available)\r\n                    })\r\n                    data.colors = map2dArray(data.availableCount, data.numRespondents)\r\n                    if (data.surveyUsing === \"Dates\") data.localTimes = setTimezone(data.days, timezone)\r\n                    console.log(\"processed data: \", data)\r\n                    setMeetingData(data)\r\n                    return data\r\n                }\r\n            })\r\n    }\r\n\r\n    function setTimezone(days, usertz) {\r\n        let localTimes = []\r\n        days.forEach(day => {\r\n            localTimes.push(Moment.utc(day).tz(usertz))\r\n        })\r\n        _setTimezone(usertz)\r\n        return localTimes\r\n    }\r\n\r\n    function handleTimezone(e) {\r\n        console.log(\"changing timezone to \", e.target.value)\r\n        let localTimes = setTimezone(meetingData.days, e.target.value)\r\n        console.log(meetingData.localTimes)\r\n        setMeetingData({ ...meetingData, localTimes: localTimes })\r\n    }\r\n\r\n    function SignInSignOut() {\r\n        if (userData == null) return <SigninForm meetingData={meetingData} setMeetingData={setMeetingData} userData={userData} setUserData={setUserData} />\r\n        else return <SignoutForm userData={userData} setUserData={setUserData} getMeeting={() => getMeeting('/' + meetingData.id)} meetingId={meetingData.id} />\r\n    }\r\n\r\n    useEffect(() => handlePath(), [])\r\n    useEffect(() => {\r\n        console.log(\"new meeting data: \", meetingData)\r\n    }, [meetingData])\r\n\r\n    if (fetchErr) {\r\n        return (\r\n            <p>404 Invalid URL!!!</p>\r\n        )\r\n    }\r\n\r\n    if (meetingData == null) {\r\n        return (\r\n            <p>Loading...</p>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"header-container\">\r\n                <h1 >{meetingData.name}</h1>\r\n                <h2 >{meetingData.description}</h2>\r\n                <div className = \"sign-form\">\r\n                <SignInSignOut />\r\n                </div>\r\n                {meetingData.surveyUsing === \"Dates\" && <div>\r\n                    <span style={{ paddingRight: \"1rem\" }}>Your timezone:</span>\r\n                    <Form.Control as=\"select\" style={{ maxWidth: \"20rem\", display: \"inline\" }} name=\"timezone\" defaultValue={timezone} onChange={handleTimezone}>\r\n                        {Moment.tz.names().map(tz => <option >{tz}</option>)}\r\n                    </Form.Control>\r\n                </div>}\r\n            </div>\r\n            {<AvailabilityTable meetingData={meetingData} userData={userData} setUserData={setUserData} getMeeting={getMeeting} />}\r\n            <a style = {{color: \"var(--highlight)\", paddingTop: \"1.5rem\", width: \"10rem\", margin: \"auto\"}} href = \"/\">Create Your Own</a>\r\n        </div>\r\n    )\r\n}","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signinForm.js",["93"],"import React from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport { convert1dTo2dArray, subtract2dArrays, map2dArray } from './utils'\r\n\r\nexport default function SigninForm({ meetingData, setMeetingData, setUserData }) {\r\n\r\n    const { register, errors, handleSubmit } = useForm()\r\n\r\n    function onSubmit(userInfo) {\r\n\r\n        let data = {\r\n            name: userInfo.username,\r\n            password: userInfo.password === \"\" ? null : userInfo.password,\r\n        }\r\n\r\n        fetch('/api/people/' + meetingData.id, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(res => {\r\n                console.log('raw server login response: ', res)\r\n                return res.status / 100 != 2 ? res : res.json()\r\n            })\r\n            .then(data => {\r\n                console.log(\"processed login data\", data)\r\n                if (data == null) console.log(\"null res\")\r\n                else if (data.status !== undefined || data.value !== undefined) {\r\n                    console.log(data.status, data.statusText, data.value)\r\n                }\r\n                else {\r\n                    data.available = convert1dTo2dArray(data.available, meetingData.numTimeslots, meetingData.numDays)\r\n                    let newAvailableCount = subtract2dArrays([...meetingData.availableCount], data.available)\r\n                    let numRespondents = meetingData.numRespondents + 1\r\n                    meetingData.people.forEach(person => {\r\n                        if (data.name === person.name) {\r\n                            numRespondents--\r\n                        }\r\n                    })\r\n                    console.log(\"created new person?\", numRespondents - meetingData.numRespondents)\r\n                    setMeetingData({\r\n                        ...meetingData,\r\n                        availableCount: newAvailableCount,\r\n                        colors: map2dArray(newAvailableCount, numRespondents),\r\n                        numRespondents: numRespondents\r\n                    })\r\n                    setUserData(data)\r\n                }\r\n            })\r\n    }\r\n\r\n    console.log(errors)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <p style = {{width: \"25rem\"}}>New to this event? Make up a name and password. Returning? Use the same name/ password.</p>\r\n            <input type=\"text\" placeholder=\"Name\" name=\"username\" ref={register({ \r\n                required: {\r\n                    value: true,\r\n                    message: \"Please enter a name to sign in.\"\r\n                }, \r\n                minLength: {\r\n                    value: 1,\r\n                    message: \"Name must be between 1-20 characters long.\"\r\n                },\r\n                maxLength: {\r\n                    value: 20,\r\n                    message: \"Name must be between 1-20 characters long.\" } })} />\r\n                <div className=\"error\">{(errors.username && errors.username.message) ? errors.username.message : \"\"}</div>\r\n            <input type=\"password\" placeholder=\"Password (optional)\" name=\"password\" ref={register({ \r\n                required:false, \r\n                maxLength: {\r\n                    value: 20,\r\n                    message: \"Password must be less than 20 characters long.\" } })} />\r\n                    <div className=\"error\">{(errors.password && errors.password.message) ? errors.password.message : \"\"}</div>\r\n            <input type=\"submit\" value=\"Login\" className = \"button-sign\" />\r\n        </form>\r\n    )\r\n}\r\n","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\available.js",["94"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\table.js",["95"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\utils.js",["96","97","98","99"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\timeTable.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signoutForm.js",["100"],"import React from 'react'\r\n\r\nexport default function SignoutForm({userData, setUserData, getMeeting, meetingId }) {\r\n\r\n    function signout() {\r\n        console.log(\"signing out\")\r\n        getMeeting()\r\n        setUserData(null)\r\n    }\r\n\r\n    function deleteResponse() {\r\n        console.log(\"deleting response\")\r\n        let data = {\r\n            name: userData.name,\r\n            password: userData.password === \"\" ? null : userData.password,\r\n        }\r\n        console.log(\"sending delete request with: \", data)\r\n        fetch('/api/people/' + meetingId, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(res => {\r\n                console.log('raw server login response: ', res)\r\n                return Math.floor(res.status / 100) != 2 ? null : res\r\n            })\r\n            .then(data => {\r\n                if (data === null) {\r\n                    console.log(\"Internal error occurred. Please try again later.\")\r\n                    return false\r\n                }\r\n                else {\r\n                    console.log(data.status, data.statusText, data.value)\r\n                    return true\r\n                }\r\n            })\r\n            .then(success => {\r\n                if(success) signout()\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>Signed in as <span style = {{fontWeight: \"bold\"}}>{userData.name}</span></p>\r\n            <button className = \"button-sign\" value=\"signout\" onClick={signout} >sign out</button>\r\n            <button className = \"button-text\" value=\"delete\" onClick={deleteResponse} >delete response</button>\r\n        </div>\r\n    )\r\n}","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\navbar.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\footer.js",["101"],"import React from 'react'\r\nimport '../index.css'\r\nexport default function Footer() {\r\n    return (\r\n        <div className = \"footer\">\r\n            <p className = \"footer-p\">Like meetuptime? Hit us with a FAT Donation</p>\r\n            <button className = \"button-secondary\">Donate</button>\r\n            <p className = \"footer-p\" >Think we can do better? <a style = {{color: \"#5BC0BE\"}} href=\"https://docs.google.com/forms/d/e/1FAIpQLScVYq6mIZ4e7V7uCpYZtcBd3OEpeCYMXVRI3cDlJcBs8UtYVg/viewform?usp=sf_link\" target=\"_blank\">Submit feedback</a></p>\r\n        </div>\r\n    )\r\n}","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\groupAvailable.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\legend.js",[],{"ruleId":"102","severity":1,"message":"103","line":10,"column":3,"nodeType":"104","messageId":"105","endLine":10,"endColumn":7},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"106","replacedBy":"110"},{"ruleId":"108","replacedBy":"111"},{"ruleId":"102","severity":1,"message":"112","line":5,"column":21,"nodeType":"104","messageId":"105","endLine":5,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":96,"column":8,"nodeType":"115","endLine":96,"endColumn":46,"suggestions":"116"},{"ruleId":"102","severity":1,"message":"117","line":3,"column":16,"nodeType":"104","messageId":"105","endLine":3,"endColumn":27},{"ruleId":"102","severity":1,"message":"118","line":19,"column":11,"nodeType":"104","messageId":"105","endLine":19,"endColumn":18},{"ruleId":"113","severity":1,"message":"119","line":89,"column":35,"nodeType":"115","endLine":89,"endColumn":37,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":25,"column":41,"nodeType":"123","messageId":"124","endLine":25,"endColumn":43},{"ruleId":"125","severity":1,"message":"126","line":90,"column":74,"nodeType":"127","endLine":90,"endColumn":151},{"ruleId":"102","severity":1,"message":"128","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":17},{"ruleId":"129","severity":1,"message":"130","line":79,"column":18,"nodeType":"123","messageId":"131","endLine":79,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":79,"column":23,"nodeType":"123","messageId":"131","endLine":79,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":83,"column":18,"nodeType":"123","messageId":"131","endLine":83,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":83,"column":23,"nodeType":"123","messageId":"131","endLine":83,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":27,"column":53,"nodeType":"123","messageId":"124","endLine":27,"endColumn":55},{"ruleId":"132","severity":1,"message":"133","line":8,"column":215,"nodeType":"134","endLine":8,"endColumn":230},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["135"],"no-negated-in-lhs",["136"],["135"],["136"],"'errors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'daySelectionError'. Either include it or remove the dependency array.","ArrayExpression",["137"],"'FormControl' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlePath'. Either include it or remove the dependency array.",["138"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'PropTypes' is defined but never used.","no-mixed-operators","Unexpected mix of '>>' and '&'.","unexpectedMixedOperator","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [daySelectionError, selectedDates, selectedDays, showCal]",{"range":"143","text":"144"},"Update the dependencies array to be: [handlePath]",{"range":"145","text":"146"},[3055,3093],"[daySelectionError, selectedDates, selectedDays, showCal]",[3599,3601],"[handlePath]"]