[{"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\reportWebVitals.js":"1","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\index.js":"2","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\CreateForm.js":"3","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\calendar.js":"4","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\week.js":"5","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createForm.js":"6","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createPage.js":"7","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\viewPage.js":"8","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signinForm.js":"9","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\available.js":"10","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\table.js":"11","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\utils.js":"12","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\timeTable.js":"13","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signoutForm.js":"14","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\navbar.js":"15","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\footer.js":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":1484,"mtime":1607643241413,"results":"19","hashOfConfig":"18"},{"size":5617,"mtime":1606456407006,"results":"20","hashOfConfig":"18"},{"size":797,"mtime":1607664988595,"results":"21","hashOfConfig":"18"},{"size":1432,"mtime":1606442305526,"results":"22","hashOfConfig":"18"},{"size":10666,"mtime":1607669837507,"results":"23","hashOfConfig":"18"},{"size":682,"mtime":1607667903998,"results":"24","hashOfConfig":"18"},{"size":4344,"mtime":1607579912287,"results":"25","hashOfConfig":"18"},{"size":2626,"mtime":1607570749620,"results":"26","hashOfConfig":"18"},{"size":2836,"mtime":1607579172283,"results":"27","hashOfConfig":"18"},{"size":9582,"mtime":1607583333681,"results":"28","hashOfConfig":"18"},{"size":2572,"mtime":1607574013910,"results":"29","hashOfConfig":"18"},{"size":1831,"mtime":1607578030889,"results":"30","hashOfConfig":"18"},{"size":575,"mtime":1607579965420,"results":"31","hashOfConfig":"18"},{"size":632,"mtime":1607643343797,"results":"32","hashOfConfig":"18"},{"size":399,"mtime":1607666597732,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17p8c2d",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\reportWebVitals.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\index.js",["69"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\CreateForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\calendar.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\week.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createForm.js",["70"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createPage.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\viewPage.js",["71","72"],"import React, { useState, useEffect } from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\n\r\nimport SigninForm from './signinForm'\r\nimport SignoutForm from './signoutForm'\r\nimport AvailabilityTable from './available'\r\nimport { convert1dTo2dArray, initialize2dIntArray, add2dArrays, map2dArray } from './utils'\r\nimport Moment from 'moment-timezone'\r\n\r\nexport default function ViewPage() {\r\n\r\n    const [meetingData, setMeetingData] = useState(null)\r\n    const [userData, setUserData] = useState(null)\r\n    const [timezone, _setTimezone] = useState(Moment.tz.guess())\r\n    const [fetchErr, setFetchErr] = useState(false)\r\n\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n\r\n    function handlePath() {\r\n        console.log(\"handling path!!!\")\r\n        let path = location.pathname\r\n        if (path.length === 9) {\r\n            getMeeting(path)\r\n        }\r\n        else {\r\n            console.log(\"invalid path\")\r\n            setFetchErr(true)\r\n        }\r\n    }\r\n\r\n    function getMeeting(path) {\r\n        fetch('/api/meetings' + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(res => {\r\n                console.log('raw server response: ', res)\r\n                return res.status === 404 ? null : res.json()\r\n            })\r\n            .then(data => {\r\n                if (data == null) {\r\n                    setFetchErr(true)\r\n                }\r\n                else {\r\n                    if (data.days.length === 0) data.days = [...data.dates]\r\n\r\n                    //let availableCount = initialize2dIntArray(data.numTimeslots, data.numDays)\r\n                    data.availableCount = initialize2dIntArray(data.numTimeslots, data.numDays)\r\n                    data.numRespondents = data.people.length\r\n                    data.people.forEach(person => {\r\n                        person.available = convert1dTo2dArray(person.available, data.numTimeslots, data.numDays)\r\n                        data.availableCount = add2dArrays(data.availableCount, person.available)\r\n                        //console.log(\"converted available array: \" + person.name, person.available)\r\n                    })\r\n                    data.colors = map2dArray(data.availableCount, data.numRespondents)\r\n                    if (data.surveyUsing === \"Dates\") data.localTimes = setTimezone(data.days, timezone)\r\n                    console.log(\"processed data: \", data)\r\n                    setMeetingData(data)\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n    function setTimezone(days, usertz) {\r\n        let localTimes = []\r\n        days.forEach(day => {\r\n            localTimes.push(Moment.utc(day).tz(usertz))\r\n        })\r\n        _setTimezone(usertz)\r\n        return localTimes\r\n    }\r\n\r\n    function handleTimezone(e) {\r\n        console.log(\"changing timezone to \", e.target.value)\r\n        let localTimes = setTimezone(meetingData.days, e.target.value)\r\n        console.log(meetingData.localTimes)\r\n        setMeetingData({ ...meetingData, localTimes: localTimes })\r\n    }\r\n\r\n    function SignInSignOut() {\r\n        if(userData == null) return <SigninForm meetingData={meetingData} setMeetingData={setMeetingData} userData={userData} setUserData={setUserData} />\r\n        else return <SignoutForm userData={userData} setUserData={setUserData} getMeeting = {() => getMeeting('/' + meetingData.id)}/>\r\n    }\r\n\r\n    useEffect(() => handlePath(), [])\r\n    useEffect(() => {\r\n        console.log(\"new meeting data: \", meetingData)\r\n    }, [meetingData])\r\n\r\n    if (fetchErr) {\r\n        return (\r\n            <p>404 Invalid URL!!!</p>\r\n        )\r\n    }\r\n\r\n    if (meetingData == null) {\r\n        return (\r\n            <p>Loading...</p>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>{meetingData.name}</h1>\r\n            <h2>{meetingData.description}</h2>\r\n            <SignInSignOut />\r\n            {<AvailabilityTable meetingData={meetingData} userData={userData} setUserData={setUserData} />}\r\n            {meetingData.surveyUsing === \"Dates\" && <select name=\"timezone\" defaultValue={timezone} onChange={handleTimezone}>{Moment.tz.names().map(tz => <option >{tz}</option>)}</select>}\r\n            <p>Create your own!</p>\r\n            <p>Submit feedback</p>\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signinForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\available.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\table.js",["73","74","75"],"import React from \"react\";\r\nimport clone from \"clone\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class TableDragSelect extends React.Component {\r\n\r\n  static defaultProps = {\r\n    value: [],\r\n    maxRows: Infinity,\r\n    maxColumns: Infinity,\r\n    onSelectionStart: () => { },\r\n    onInput: () => { },\r\n    onChange: () => { }\r\n  };\r\n\r\n  state = {\r\n    selectionStarted: false,\r\n    startRow: null,\r\n    startColumn: null,\r\n    endRow: null,\r\n    endColumn: null,\r\n    addMode: null\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    console.log(\"table component mounting\")\r\n    window.addEventListener(\"mouseup\", this.handleTouchEndWindow);\r\n    window.addEventListener(\"touchend\", this.handleTouchEndWindow);\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    console.log(\"table component unmounting\")\r\n    window.removeEventListener(\"mouseup\", this.handleTouchEndWindow);\r\n    window.removeEventListener(\"touchend\", this.handleTouchEndWindow);\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"table-drag-select-container\">\r\n        <table className=\"table-drag-select\">\r\n          <thead>\r\n            {this.renderHeader()}\r\n          </thead>\r\n          <tbody>{this.renderRows()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderHeader = () => {\r\n    let header = []\r\n    if (this.props.days[0].length === 3)\r\n      this.props.days.forEach((day, i) => header.push(<th key = {i}>{day}</th>))\r\n    else {\r\n      this.props.days.forEach((day, i) => header.push(<th key = {i}>{this.dateHeader(day)}</th>))\r\n    }\r\n    return <tr className=\"table-header-day\">{header}</tr>\r\n  }\r\n\r\n  dateHeader = (day) => {\r\n    return (\r\n      <div>\r\n        <div className=\"table-header-day\">\r\n          {day.format('ddd')}\r\n        </div>\r\n        <div className=\"table-header-date\">\r\n          {day.format('MMM D, y')}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRows = () =>\r\n    React.Children.map(this.props.children, (tr, i) => {\r\n\r\n      // if not header\r\n      return (\r\n        <tr key={i} {...tr.props}>\r\n          {React.Children.map(tr.props.children, (cell, j) => {\r\n            if (this.props.value === null) {\r\n              return (\r\n                <Cell\r\n                  key={j}\r\n                  onTouchStart={this.handleTouchStartCellViewing}\r\n                  onTouchMove={this.handleTouchMoveCellViewing}\r\n                  selected={false}\r\n                  beingSelected={this.isCellBeingSelected(i, j)}\r\n                  addMode={this.state.addMode}\r\n                  disabled={true}\r\n                  color={this.props.colors[i][j]}\r\n                  rowNum={i}\r\n                  {...cell.props}\r\n                >\r\n                  {cell.props.children}\r\n                </Cell>\r\n              )\r\n            }\r\n            else {\r\n              return (\r\n                <Cell\r\n                  key={j}\r\n                  onTouchStart={this.handleTouchStartCellEditing}\r\n                  onTouchMove={this.handleTouchMoveCellEditing}\r\n                  selected={this.props.value[i][j]}\r\n                  beingSelected={this.isCellBeingSelected(i, j)}\r\n                  addMode={this.state.addMode}\r\n                  disabled={false}\r\n                  color={this.props.colors[i][j]}\r\n                  rowNum={i}\r\n                  {...cell.props}\r\n                >\r\n                  {cell.props.children}\r\n                </Cell>\r\n              )\r\n            }\r\n          }\r\n          )}\r\n        </tr>\r\n      )\r\n\r\n    });\r\n\r\n  handleTouchStartCellViewing = e => {\r\n    console.log(\"touch started\", e)\r\n    const isLeftClick = e.button === 0;\r\n    const isTouch = e.type !== \"mousedown\";\r\n    if (isLeftClick || isTouch) {\r\n      e.preventDefault();\r\n      let { row, column } = eventToCellLocation(e);\r\n\r\n    }\r\n  }\r\n\r\n  handleTouchMoveCellViewing = e => {\r\n    console.log(\"touch moved\", e)\r\n  }\r\n\r\n  handleTouchStartCellEditing = e => {\r\n    const isLeftClick = e.button === 0;\r\n    const isTouch = e.type !== \"mousedown\";\r\n    if (!this.state.selectionStarted && (isLeftClick || isTouch)) {\r\n      e.preventDefault();\r\n      let { row, column } = eventToCellLocation(e);\r\n      this.props.onSelectionStart({ row, column });\r\n      this.setState({\r\n        selectionStarted: true,\r\n        startRow: row,\r\n        startColumn: column,\r\n        endRow: row,\r\n        endColumn: column,\r\n        addMode: !this.props.value[row][column]\r\n      });\r\n    }\r\n  };\r\n\r\n  handleTouchMoveCellEditing = e => {\r\n    if (this.state.selectionStarted) {\r\n      e.preventDefault();\r\n      let { row, column } = eventToCellLocation(e);\r\n      const { startRow, startColumn, endRow, endColumn } = this.state;\r\n\r\n      if (endRow !== row || endColumn !== column) {\r\n        const nextRowCount =\r\n          startRow === null && endRow === null\r\n            ? 0\r\n            : Math.abs(row - startRow) + 1;\r\n        const nextColumnCount =\r\n          startColumn === null && endColumn === null\r\n            ? 0\r\n            : Math.abs(column - startColumn) + 1;\r\n\r\n        if (nextRowCount <= this.props.maxRows) {\r\n          this.setState({ endRow: row });\r\n        }\r\n\r\n        if (nextColumnCount <= this.props.maxColumns) {\r\n          this.setState({ endColumn: column });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  handleTouchEndWindow = e => {\r\n    const isLeftClick = e.button === 0;\r\n    const isTouch = e.type !== \"mousedown\";\r\n    if (this.state.selectionStarted && (isLeftClick || isTouch)) {\r\n      const value = clone(this.props.value);\r\n      const minRow = Math.min(this.state.startRow, this.state.endRow);\r\n      const maxRow = Math.max(this.state.startRow, this.state.endRow);\r\n      for (let row = minRow; row <= maxRow; row++) {\r\n        const minColumn = Math.min(\r\n          this.state.startColumn,\r\n          this.state.endColumn\r\n        );\r\n        const maxColumn = Math.max(\r\n          this.state.startColumn,\r\n          this.state.endColumn\r\n        );\r\n        for (let column = minColumn; column <= maxColumn; column++) {\r\n          value[row][column] = this.state.addMode;\r\n        }\r\n      }\r\n      this.setState({ selectionStarted: false });\r\n      this.props.onChange(value);\r\n    }\r\n  };\r\n\r\n  isCellBeingSelected = (row, column) => {\r\n    const minRow = Math.min(this.state.startRow, this.state.endRow);\r\n    const maxRow = Math.max(this.state.startRow, this.state.endRow);\r\n    const minColumn = Math.min(this.state.startColumn, this.state.endColumn);\r\n    const maxColumn = Math.max(this.state.startColumn, this.state.endColumn);\r\n\r\n    return (\r\n      this.state.selectionStarted &&\r\n      (row >= minRow &&\r\n        row <= maxRow &&\r\n        column >= minColumn &&\r\n        column <= maxColumn)\r\n    );\r\n  };\r\n}\r\n\r\nclass Cell extends React.Component {\r\n  // This optimization gave a 10% performance boost while drag-selecting\r\n  // cells\r\n  shouldComponentUpdate = nextProps =>\r\n    this.props.beingSelected !== nextProps.beingSelected ||\r\n    this.props.selected !== nextProps.selected || \r\n    this.props.color !== nextProps.color\r\n\r\n  componentDidMount = () => {\r\n    // We need to call addEventListener ourselves so that we can pass\r\n    // {passive: false}\r\n    this.td.addEventListener(\"touchstart\", this.handleTouchStart, {\r\n      passive: false\r\n    });\r\n    this.td.addEventListener(\"touchmove\", this.handleTouchMove, {\r\n      passive: false\r\n    });\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    this.td.removeEventListener(\"touchstart\", this.handleTouchStart);\r\n    this.td.removeEventListener(\"touchmove\", this.handleTouchMove);\r\n  };\r\n\r\n  render = () => {\r\n    let {\r\n      className = \"\",\r\n      disabled,\r\n      beingSelected,\r\n      selected,\r\n      onTouchStart,\r\n      onTouchMove,\r\n      addMode,\r\n      color,\r\n      rowNum,\r\n      ...props\r\n    } = this.props;\r\n\r\n    let style = {backgroundColor: color}\r\n    let selectedColor = \"#35b57b\", deselectedColor = \"red\"\r\n\r\n      className += \" cell-enabled\";\r\n      if (beingSelected) {\r\n        if (addMode) style.backgroundColor = selectedColor\r\n        else style.backgroundColor = deselectedColor\r\n      }\r\n      else if (selected) {\r\n        //className += \" cell-selected\";\r\n        style.backgroundColor = selectedColor\r\n      }\r\n\r\n\r\n    //console.log(\"color: \", style)\r\n\r\n    if(rowNum % 4 === 0) {\r\n      style.borderTop = \"3px solid #e1e3e6\"\r\n    }\r\n\r\n    return (\r\n      <td\r\n        ref={td => (this.td = td)}\r\n        className={className}\r\n        onMouseDown={this.handleTouchStart}\r\n        onMouseMove={this.handleTouchMove}\r\n        style={style}\r\n        {...props}\r\n      >\r\n        {this.props.children || <span>&nbsp;</span>}\r\n      </td>\r\n    );\r\n  };\r\n\r\n  handleTouchStart = e => {\r\n    if (!this.props.disabled) {\r\n      this.props.onTouchStart(e);\r\n    }\r\n  };\r\n\r\n  handleTouchMove = e => {\r\n    if (!this.props.disabled) {\r\n      this.props.onTouchMove(e);\r\n    }\r\n  };\r\n}\r\n\r\n// Takes a mouse or touch event and returns the corresponding row and cell.\r\n// Example:\r\n//\r\n// eventToCellLocation(event);\r\n// {row: 2, column: 3}\r\nconst eventToCellLocation = e => {\r\n  let target;\r\n  // For touchmove and touchend events, e.target and e.touches[n].target are\r\n  // wrong, so we have to rely on elementFromPoint(). For mouse clicks, we have\r\n  // to use e.target.\r\n  if (e.touches) {\r\n    const touch = e.touches[0];\r\n    target = document.elementFromPoint(touch.clientX, touch.clientY);\r\n  } else {\r\n    target = e.target;\r\n    while (target.tagName !== \"TD\") {\r\n      target = target.parentNode;\r\n    }\r\n  }\r\n  return {\r\n    row: target.parentNode.rowIndex - 1,\r\n    column: target.cellIndex\r\n  };\r\n};","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\utils.js",["76","77","78","79"],"export const convert1dTo2dArray = (input, numRows, numCols) => {\r\n    let output = []\r\n    for (let row = 0; row < numRows; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < numCols; col++) {\r\n            currRow.push(input[getIndexFromCoords(row, col, numCols)])\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const subtract2dArrays = (a, b) => {\r\n    for (let row = 0; row < a.length; row++) {\r\n        for (let col = 0; col < a[0].length; col++) {\r\n            a[row][col] -= b[row][col] === true ? 1 : 0\r\n        }\r\n    }\r\n    return a\r\n}\r\n\r\nexport const add2dArrays = (a, b) => {\r\n    //console.log(\"addition input:\", a, b)\r\n    for (let row = 0; row < a.length; row++) {\r\n        for (let col = 0; col < a[0].length; col++) {\r\n            a[row][col] += b[row][col]\r\n        }\r\n    }\r\n    //console.log(\"addition output: \", a)\r\n    return a\r\n}\r\n\r\nexport const getIndexFromCoords = (row, col, numCols) => {\r\n    return (row * numCols) + col\r\n}\r\n\r\nexport const convert2dTo1dArray = (matrix) => {\r\n    let output = []\r\n    matrix.forEach(row => {\r\n        row.forEach(cell => {\r\n            output.push(cell)\r\n        })\r\n    })\r\n    //console.log(\"1d array:\", output)\r\n    return output\r\n}\r\n\r\nexport const initialize2dIntArray = (numRows, numCols) => {\r\n    let output = []\r\n    for (let row = 0; row < numRows; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < numCols; col++) {\r\n            currRow.push(0)\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const map2dArray= (matrix, num) => {\r\n    console.log(\"mapping matrix to this many respondants: \", num)\r\n    let output = []\r\n    for (let row = 0; row < matrix.length; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < matrix[0].length; col++) {\r\n            if(num === 0 || matrix[row][col] === 0) currRow.push(\"#ffffff\")\r\n            else if(num === 1) {\r\n                currRow.push(\"#325c35\")\r\n            }\r\n            else currRow.push(lerpColor(0xcde3c8, 0x325c35 , (matrix[row][col]-1)/(num-1)))\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const lerpColor = function(a, b, amount) {\r\n    const ar = a >> 16,\r\n          ag = a >> 8 & 0xff,\r\n          ab = a & 0xff,\r\n\r\n          br = b >> 16,\r\n          bg = b >> 8 & 0xff,\r\n          bb = b & 0xff,\r\n\r\n          rr = ar + amount * (br - ar),\r\n          rg = ag + amount * (bg - ag),\r\n          rb = ab + amount * (bb - ab);\r\n\r\n    return '#' + ((rr << 16) + (rg << 8) + (rb | 0)).toString(16);\r\n}","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\timeTable.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signoutForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\navbar.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\footer.js",["80"],{"ruleId":"81","severity":1,"message":"82","line":10,"column":3,"nodeType":"83","messageId":"84","endLine":10,"endColumn":7},{"ruleId":"85","severity":1,"message":"86","line":94,"column":8,"nodeType":"87","endLine":94,"endColumn":46,"suggestions":"88"},{"ruleId":"81","severity":1,"message":"89","line":18,"column":11,"nodeType":"83","messageId":"84","endLine":18,"endColumn":18},{"ruleId":"85","severity":1,"message":"90","line":88,"column":35,"nodeType":"87","endLine":88,"endColumn":37,"suggestions":"91"},{"ruleId":"81","severity":1,"message":"92","line":3,"column":8,"nodeType":"83","messageId":"84","endLine":3,"endColumn":17},{"ruleId":"81","severity":1,"message":"93","line":129,"column":13,"nodeType":"83","messageId":"84","endLine":129,"endColumn":16},{"ruleId":"81","severity":1,"message":"94","line":129,"column":18,"nodeType":"83","messageId":"84","endLine":129,"endColumn":24},{"ruleId":"95","severity":1,"message":"96","line":79,"column":18,"nodeType":"97","messageId":"98","endLine":79,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":79,"column":23,"nodeType":"97","messageId":"98","endLine":79,"endColumn":24},{"ruleId":"95","severity":1,"message":"96","line":83,"column":18,"nodeType":"97","messageId":"98","endLine":83,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":83,"column":23,"nodeType":"97","messageId":"98","endLine":83,"endColumn":24},{"ruleId":"99","severity":1,"message":"100","line":8,"column":98,"nodeType":"101","endLine":8,"endColumn":113},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'daySelectionError'. Either include it or remove the dependency array.","ArrayExpression",["102"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlePath'. Either include it or remove the dependency array.",["103"],"'PropTypes' is defined but never used.","'row' is assigned a value but never used.","'column' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '>>' and '&'.","BinaryExpression","unexpectedMixedOperator","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [daySelectionError, selectedDates, selectedDays, showCal]",{"range":"108","text":"109"},"Update the dependencies array to be: [handlePath]",{"range":"110","text":"111"},[2907,2945],"[daySelectionError, selectedDates, selectedDays, showCal]",[3488,3490],"[handlePath]"]