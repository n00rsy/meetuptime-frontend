[{"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\index.js":"1","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\available.js":"2","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\week.js":"3","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createForm.js":"4","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\viewPage.js":"5","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\background.js":"6","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createPage.js":"7","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\utils.js":"8","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signinForm.js":"9","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\staticPages\\staticPage.js":"10","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\staticPages\\howto.js":"11","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signoutForm.js":"12","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\groupAvailable.js":"13","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\staticPages\\about.js":"14","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\staticPages\\faq.js":"15","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\footer.js":"16","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\navbar.js":"17"},{"size":1962,"mtime":1610053308168,"results":"18","hashOfConfig":"19"},{"size":5207,"mtime":1608254542110,"results":"20","hashOfConfig":"19"},{"size":2428,"mtime":1608255957915,"results":"21","hashOfConfig":"19"},{"size":11910,"mtime":1608484190132,"results":"22","hashOfConfig":"19"},{"size":6521,"mtime":1610058080745,"results":"23","hashOfConfig":"19"},{"size":2287,"mtime":1610058328369,"results":"24","hashOfConfig":"19"},{"size":388,"mtime":1608484241352,"results":"25","hashOfConfig":"19"},{"size":2572,"mtime":1608153333259,"results":"26","hashOfConfig":"19"},{"size":3754,"mtime":1610058008693,"results":"27","hashOfConfig":"19"},{"size":343,"mtime":1609716097249,"results":"28","hashOfConfig":"19"},{"size":1383,"mtime":1610052960443,"results":"29","hashOfConfig":"19"},{"size":1800,"mtime":1608254567223,"results":"30","hashOfConfig":"19"},{"size":2027,"mtime":1608154192102,"results":"31","hashOfConfig":"19"},{"size":1575,"mtime":1610053199246,"results":"32","hashOfConfig":"19"},{"size":1218,"mtime":1610056007068,"results":"33","hashOfConfig":"19"},{"size":582,"mtime":1610057717610,"results":"34","hashOfConfig":"19"},{"size":764,"mtime":1610059509850,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17p8c2d",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\index.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\available.js",["74"],"import React, { useState, useMemo, useEffect } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nimport TableDragSelect from \"./table\";\r\nimport MemoizedTimeTable from \"./timeTable\"\r\nimport { convert2dTo1dArray } from './utils'\r\nimport GroupAvailable from './groupAvailable'\r\nimport Legend from './legend'\r\n\r\nimport edit from '../img/edit.png'\r\nimport view from '../img/view.png'\r\nimport './styles.css'\r\nimport CONFIG from '../config.json'\r\n\r\nexport default function AvailabilityTable({ meetingData, userData, setUserData, getMeeting }) {\r\n\r\n    const [saving, setSaving] = useState(false)\r\n    const [currentCoords, setCurrentCoords] = useState(null)\r\n    const [editing, setEditing] = useState(userData !== null)\r\n\r\n    let handleChange = cells => {\r\n        //console.log(\"new cells: \", cells)\r\n        setUserData({ ...userData, available: cells });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (userData === null) setEditing(false)\r\n        else setEditing(true)\r\n    }, [userData])\r\n\r\n    function save() {\r\n        setSaving(true)\r\n        setEditing(false)\r\n        let data = {\r\n            name: userData.name,\r\n            available: convert2dTo1dArray(userData.available)\r\n        }\r\n        console.log(\"saving changes!\", data, meetingData.id)\r\n        fetch(CONFIG.backendApi + '/api/people/' + meetingData.id, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .catch(err => {\r\n                console.log(\"fetch error!\", err)\r\n                setSaving(false)\r\n            })\r\n            .then(res => {\r\n                setSaving(false)\r\n                console.log('raw server response: ', res)\r\n                if (res.status === 204) {\r\n                    getMeeting('/' + meetingData.id)\r\n                    return true\r\n                }\r\n                return false\r\n            })\r\n\r\n    }\r\n\r\n    function toggleEditing() {\r\n        console.log(\"toggling editing!\")\r\n        setEditing(!editing)\r\n    }\r\n\r\n    function generateTableCells(numTimeslots, numDays) {\r\n        console.log(\"generating raw table rows and cols!!!\")\r\n        let table = []\r\n        for (let time = 0; time < numTimeslots; time++) {\r\n            let currRow = []\r\n            for (let day = 0; day < numDays; day++) {\r\n                currRow.push(<td key={day}></td>)\r\n            }\r\n            table.push(<tr key={time}>{currRow}</tr>)\r\n        }\r\n        return table\r\n    }\r\n\r\n    function ToggleButton() {\r\n        return (\r\n            <button className=\"toggle-button\"\r\n                onClick={toggleEditing} disabled={!userData}><img style={{ width: \"1.5rem\", height: \"1.5rem\" }} src={editing ? view : edit}></img></button>\r\n        )\r\n    }\r\n\r\n    let startingMoment = meetingData.surveyUsing === \"Dates\" ? meetingData.localTimes[0].format(\"H\") : meetingData.startTime\r\n    const table = useMemo(() => generateTableCells(meetingData.numTimeslots, meetingData.numDays), [meetingData.numTimeslots, meetingData.numDays])\r\n    return (\r\n        <div>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col>\r\n                        {meetingData.numRespondents > 0 && <Legend numRespondents={meetingData.numRespondents} />}\r\n                    </Col>\r\n                    <Col>\r\n                    <ToggleButton />\r\n                        <div className=\"container\">\r\n                            <MemoizedTimeTable startingMoment={startingMoment} numTimeslots={meetingData.numTimeslots} surveyUsing={meetingData.surveyUsing} ToggleButton = {ToggleButton} />\r\n                            <TableDragSelect\r\n                                value={userData === null ? null : userData.available}\r\n                                onChange={handleChange}\r\n                                days={meetingData.surveyUsing === \"Dates\" ? meetingData.localTimes : meetingData.days}\r\n                                colors={meetingData.colors}\r\n                                setCurrentCoords={setCurrentCoords}\r\n                                currentCoords={currentCoords}\r\n                                editing={editing}>\r\n                                {table}\r\n                            </TableDragSelect>\r\n\r\n                        </div>\r\n                        {userData && <button style={{ marginTop: \"2rem\" }} className=\"button-important\" value=\"Save\" onClick={save}>{saving ? \"SAVING...\" : \" Save Response\"}</button>}\r\n                    </Col>\r\n                    <Col>\r\n                        <GroupAvailable\r\n                            numRespondents={meetingData.numRespondents}\r\n                            people={meetingData.people}\r\n                            currentCoords={currentCoords}\r\n                            moments={meetingData.surveyUsing === 'Dates' ? meetingData.localTimes : { days: meetingData.days, startTime: meetingData.startTime }}\r\n                            surveyUsing={meetingData.surveyUsing} />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <div className=\"container-bottom\">\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n",["75","76"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\week.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createForm.js",["77","78","79"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\viewPage.js",["80","81","82","83"],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\background.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\createPage\\createPage.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\utils.js",["84","85","86","87"],"export const convert1dTo2dArray = (input, numRows, numCols) => {\r\n    let output = []\r\n    for (let row = 0; row < numRows; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < numCols; col++) {\r\n            currRow.push(input[getIndexFromCoords(row, col, numCols)])\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const subtract2dArrays = (a, b) => {\r\n    for (let row = 0; row < a.length; row++) {\r\n        for (let col = 0; col < a[0].length; col++) {\r\n            a[row][col] -= b[row][col] === true ? 1 : 0\r\n        }\r\n    }\r\n    return a\r\n}\r\n\r\nexport const add2dArrays = (a, b) => {\r\n    //console.log(\"addition input:\", a, b)\r\n    for (let row = 0; row < a.length; row++) {\r\n        for (let col = 0; col < a[0].length; col++) {\r\n            a[row][col] += b[row][col]\r\n        }\r\n    }\r\n    //console.log(\"addition output: \", a)\r\n    return a\r\n}\r\n\r\nexport const getIndexFromCoords = (row, col, numCols) => {\r\n    return (row * numCols) + col\r\n}\r\n\r\nexport const convert2dTo1dArray = (matrix) => {\r\n    let output = []\r\n    matrix.forEach(row => {\r\n        row.forEach(cell => {\r\n            output.push(cell)\r\n        })\r\n    })\r\n    //console.log(\"1d array:\", output)\r\n    return output\r\n}\r\n\r\nexport const initialize2dIntArray = (numRows, numCols) => {\r\n    let output = []\r\n    for (let row = 0; row < numRows; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < numCols; col++) {\r\n            currRow.push(0)\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const map2dArray= (matrix, num) => {\r\n    console.log(\"mapping matrix to this many respondents: \", num)\r\n    let output = []\r\n    for (let row = 0; row < matrix.length; row++) {\r\n        let currRow = []\r\n        for (let col = 0; col < matrix[0].length; col++) {\r\n            if(num === 0 || matrix[row][col] === 0) currRow.push(\"#ffffff\")\r\n            else if(num === 1) {\r\n                currRow.push(\"#3a506b\")\r\n            }\r\n            else currRow.push(lerpColor(0xb5d1f5, 0x3A506B , (matrix[row][col]-1)/(num-1)))\r\n        }\r\n        output.push(currRow)\r\n    }\r\n    return output\r\n}\r\n\r\nexport const lerpColor = function(a, b, amount) {\r\n    const ar = a >> 16,\r\n          ag = a >> 8 & 0xff,\r\n          ab = a & 0xff,\r\n\r\n          br = b >> 16,\r\n          bg = b >> 8 & 0xff,\r\n          bb = b & 0xff,\r\n\r\n          rr = ar + amount * (br - ar),\r\n          rg = ag + amount * (bg - ag),\r\n          rb = ab + amount * (bb - ab);\r\n\r\n    return '#' + ((rr << 16) + (rg << 8) + (rb | 0)).toString(16);\r\n}","C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signinForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\staticPages\\staticPage.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\staticPages\\howto.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\signoutForm.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\viewPage\\groupAvailable.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\staticPages\\about.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\staticPages\\faq.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\footer.js",[],"C:\\Users\\noors\\Documents\\meetuptime-frontend\\meetuptime\\src\\shared\\navbar.js",["88"],"import React from 'react'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport Logo from '../img/logo.png'\r\nexport default function NavigationBar() {\r\n\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\" style={{ zIndex: \"10000\" }}>\r\n      <Navbar.Brand href=\"/\"><img src={Logo} style={{ height: \"4rem\" }} /></Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\" activeKey={window.location.pathname}>\r\n          <Nav.Link href=\"/\">Home</Nav.Link>\r\n          <Nav.Link href=\"/howto\">How to</Nav.Link>\r\n          <Nav.Link href=\"/about\">About</Nav.Link>\r\n          <Nav.Link href=\"/faq\">FAQ</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n\r\n}",{"ruleId":"89","severity":1,"message":"90","line":83,"column":62,"nodeType":"91","endLine":83,"endColumn":141},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":5,"column":16,"nodeType":"98","messageId":"99","endLine":5,"endColumn":19},{"ruleId":"96","severity":1,"message":"100","line":5,"column":21,"nodeType":"98","messageId":"99","endLine":5,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":97,"column":8,"nodeType":"103","endLine":97,"endColumn":46,"suggestions":"104"},{"ruleId":"96","severity":1,"message":"105","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":18},{"ruleId":"96","severity":1,"message":"106","line":23,"column":11,"nodeType":"98","messageId":"99","endLine":23,"endColumn":18},{"ruleId":"101","severity":1,"message":"107","line":98,"column":35,"nodeType":"103","endLine":98,"endColumn":37,"suggestions":"108"},{"ruleId":"89","severity":1,"message":"90","line":138,"column":162,"nodeType":"91","endLine":138,"endColumn":224},{"ruleId":"109","severity":1,"message":"110","line":79,"column":18,"nodeType":"111","messageId":"112","endLine":79,"endColumn":20},{"ruleId":"109","severity":1,"message":"110","line":79,"column":23,"nodeType":"111","messageId":"112","endLine":79,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":83,"column":18,"nodeType":"111","messageId":"112","endLine":83,"endColumn":20},{"ruleId":"109","severity":1,"message":"110","line":83,"column":23,"nodeType":"111","messageId":"112","endLine":83,"endColumn":24},{"ruleId":"89","severity":1,"message":"90","line":8,"column":30,"nodeType":"91","endLine":8,"endColumn":75},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'daySelectionError'. Either include it or remove the dependency array.","ArrayExpression",["115"],"'isMobile' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlePath'. Either include it or remove the dependency array.",["116"],"no-mixed-operators","Unexpected mix of '>>' and '&'.","BinaryExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [daySelectionError, selectedDates, selectedDays, showCal]",{"range":"121","text":"122"},"Update the dependencies array to be: [handlePath]",{"range":"123","text":"124"},[3244,3282],"[daySelectionError, selectedDates, selectedDays, showCal]",[3999,4001],"[handlePath]"]